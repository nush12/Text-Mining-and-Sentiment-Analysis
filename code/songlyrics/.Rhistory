q()
?read.csv
getwd()
n <- 20
lambda <- 1
x <- replicate(1000, rpois(n,lambda))
lambda.cap  <- colMeans(x)
rejected <- 0
accepted <- 0
for(i in 1:100) {
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
if(abs(w[i]) > 1.96){
print("Reject Ho")
rejected <- rejected + 1
}
else{
print("Do not Reject Ho")
accepted <- accepted + 1
}
}
sprintf("No of rejects: %s ", rejected)
lambda.cap  <- colMeans(x)
n <- 20
n <- 20
n <- 20
lambda <- 1
for(i in 1:1000) {
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
if(abs(w[i]) > 1.96){
print("Reject Ho")
rejected <- rejected + 1
}
else{
print("Do not Reject Ho")
accepted <- accepted + 1
}
}
for(i in 1:1000) {
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
if(abs(w[i]) > 1.96){
print("Reject Ho")
rejected <- rejected + 1
}
else{
print("Do not Reject Ho")
accepted <- accepted + 1
}
}
n <- 20
lambda <- 1
x <- replicate(1000, rpois(n,lambda))
lambda.cap  <- colMeans(x)
rejected <- 0
accepted <- 0
for(i in 1:1000) {
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
if(abs(w[i]) > 1.96){
print("Reject Ho")
rejected <- rejected + 1
}
else{
print("Do not Reject Ho")
accepted <- accepted + 1
}
}
sprintf("No of rejects: %s ", rejected)
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
n <- 20
lambda <- 1
x <- replicate(1000, rpois(n,lambda))
lambda.cap  <- colMeans(x)
rejected <- 0
accepted <- 0
for(i in 1:1000) {
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
if(abs(w[i]) > 1.96){
print("Reject Ho")
rejected <- rejected + 1
}
else{
print("Do not Reject Ho")
accepted <- accepted + 1
}
}
sprintf("No of rejects: %s ", rejected)
n <- 20
lambda <- 1
x <- replicate(1000, rpois(n,lambda))
lambda.cap  <- colMeans(x)
rejected <- 0
accepted <- 0
w <- 0
for(i in 1:1000) {
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
if(abs(w[i]) > 1.96){
print("Reject Ho")
rejected <- rejected + 1
}
else{
print("Do not Reject Ho")
accepted <- accepted + 1
}
}
sprintf("No of rejects: %s ", rejected)
n <- 20
lambda <- 1
x <- replicate(1000, rpois(n,lambda))
lambda.cap  <- colMeans(x)
rejected <- 0
accepted <- 0
for(i in 1:1000) {
w[i] <- sqrt(n) * (lambda.cap[i] - lambda) / sqrt(lambda)
if(abs(w[i]) > 1.96){
print("Reject Ho")
rejected <- rejected + 1
}
else{
accepted <- accepted + 1
}
}
sprintf("No of rejects: %s ", rejected)
data(SP500)
SP500
hist(SP500)
SP500
SP500
library(Ecdat)
SP500
hist(SP500)
str(SP500)
s <- "cat"
string2 <- strsplit("cat", split = "")[[1]]
string2[1]
string2[1]
string2 <- strsplit("cat", split = "")[[1]]
a <- "test"
a[1]
a[2]
s <-  "cat"
strsplit(s, split = "")[[1]]
strsplit(s, split = "")[[2]]
strsplit(s, split = "")
s <-  "cat"
test <- strsplit(s, split = "")
test[1]
s <-  "cat"
test <- strsplit(s, split = "")[[1]]
test[1]
help(strsplit)
test <- strsplit(s, split = "")[[0]]
test <- strsplit(s, split = "")[[2]]
test <- strsplit(s, split = "")[[1]]
data(wcgs)
?wcgs
library(faraway)
data(wcgs)
lmod.0 <- glm(chd ~ age + height + bmi + dbp + chol + dibep
+ cigs, family = binomial, wcgs)
lmod.probit <- glm(chd ~ age + height + bmi + dbp + chol + dibep
+ cigs, family = binomial(link = probit), wcgs)
lmod.0 <- glm(chd ~ age + height + bmi + dbp + chol + dibep
+ cigs, family = binomial(link = cauchit), wcgs)
install.packages("faraway")
library(plotly)
library(faraway)
library(ggplot2)
data(wcgs)
class(wcgs)
str(wcgs)
View(wcgs)
hist(wcgs$cigs)
hist(wcgs$height)
wcgs$y <- ifelse(wcgs$chd == "no", 0 , 1)
ggplot(wcgs, aes(x= wcgs$chd, y = wcgs$height))+geom_jitter()
ggplot(wcgs, aes(x= wcgs$height, y = wcgs$y, color = "blue", jitter = 0.01))+geom_jitter()
ggplot(wcgs, aes(x= wcgs$height, fill = wcgs$chd))+
geom_histogram(position = "dodge", binwidth = 1)
ggplot(wcgs, aes(x= wcgs$cigs, fill = wcgs$chd))+
geom_histogram(position = "dodge", binwidth = 5, aes(y = ..density..))
model.lm <- lm(y ~ height + cigs, wcgs)
summary(model.lm)
plot(model.lm)
wcgs$bmi <- with(wcgs, 703*wcgs$weight/(wcgs$height^2))
lmod.full <- glm(chd ~ age + height + weight + bmi + sdp + dbp + chol + dibep + cigs
+ arcus, family = binomial, wcgs)
summary(lmod.full)
library(GGally)
ggpairs(wcgs)
install.packages("faraway")
wcgs$y <- ifelse(wcgs$chd == "no", 0 , 1)
ggplot(wcgs, aes(x= wcgs$chd, y = wcgs$height))+geom_jitter()
ggplot(wcgs, aes(x= wcgs$height, y = wcgs$y, color = "blue", jitter = 0.01))+geom_jitter()
ggplot(wcgs, aes(x= wcgs$height, fill = wcgs$chd))+
geom_histogram(position = "dodge", binwidth = 1)
ggplot(wcgs, aes(x= wcgs$cigs, fill = wcgs$chd))+
geom_histogram(position = "dodge", binwidth = 5, aes(y = ..density..))
model.lm <- lm(y ~ height + cigs, wcgs)
summary(model.lm)
plot(model.lm)
wcgs$bmi <- with(wcgs, 703*wcgs$weight/(wcgs$height^2))
lmod.full <- glm(chd ~ age + height + weight + bmi + sdp + dbp + chol + dibep + cigs
+ arcus, family = binomial, wcgs)
summary(lmod.full)
library(GGally)
ggpairs(wcgs)
lmod.0 <- glm(chd ~ age + height + bmi + dbp + chol + dibep
+ cigs, family = binomial, wcgs)
lmod.probit <- glm(chd ~ age + height + bmi + dbp + chol + dibep
+ cigs, family = binomial(link = probit), wcgs)
lmod.0 <- glm(chd ~ age + height + bmi + dbp + chol + dibep
+ cigs, family = binomial(link = cauchit), wcgs)
round(coef(lmod.0), 3)
round(coef(lmod.probit), 3)
round(coef(lmod.cloglog), 3)
round(coef(lmod.cauchit), 3)
library(faraway)
data(orings)
str(orings)
summary(orings)
plot(damage/6 ~ temp, orings, xlim = c(25,85), ylim = c(0,1),
ylab = "prob of damage")
plot(damage ~ temp, orings, xlim = c(25,85), ylim = c(0,1),
ylab = "prob of damage")
box_auth()
library(boxr)
library("dplyr")
library("readxl")
box_auth()
box_setwd(64535783500)
box_ls(dir_id = box_getwd())
##reading all files
sales_and_policy_data <- box_search("Anon Sales and Policy Data.csv")%>% box_read()
email_list <- box_search("Final Email List Anonymized.csv")%>% box_read()
survey_data <- box_search("Final Survey Themes Masked without Original Keys.csv")%>% box_read()
str(suvey_data)
str(survey_data)
summary(sales_and_policy_data)
View(email_list)
glimpse(sales_and_policy_data)
summary(email_list)
nrow(sales_and_policy_data)
glimpse(sales_and_policy_data)
is.na(sales_and_policy_data)
sum(is.na(sales_and_policy_data))
summary(sales_and_policy_data)
hist(sales_and_policy_data$ANON.AgentID)
ggplot(aes(x=sales_and_policy_data$ANON.AgentID))+geom_histogram()
ggplot(sales_and_policy_data, aes(x=sales_and_policy_data$ANON.AgentID))+
geom_histogram()
ggplot(sales_and_policy_data, aes(x=sales_and_policy_data$ANON.AgentID))+
geom_bar()
ggplot(sales_and_policy_data, aes(x=sales_and_policy_data$ANON.AgentID))+
geom_bar()
unique(sales_and_policy_data$ANON.AgentID)
count(unique(sales_and_policy_data$ANON.AgentID))
nrow(unique(sales_and_policy_data$ANON.AgentID))
nrow(unique(sales_and_policy_data$ANON.AgentID))
(unique(sales_and_policy_data$ANON.AgentID))
(unique(sales_and_policy_data$ANON.Agency))
(unique(sales_and_policy_data$ANON.AgentID))
View((unique(sales_and_policy_data$ANON.Agency)))
View((unique(sales_and_policy_data$ANON.AgentID)))
agents <- data.frame(c((unique(sales_and_policy_data$ANON.AgentID)),
(unique(sales_and_policy_data$ANON.Agency))))
agents
(unique(sales_and_policy_data$ANON.Contract))))
unique(sales_and_policy_data$ANON.Contract)))
(unique(sales_and_policy_data$ANON.Contract))
unique(sales_and_policy_data$ANON.Contract))
unique(sales_and_policy_data$ANON.Contract))
summary(email_list)
unique(sales_and_policy_data$Product.Line)
unique(sales_and_policy_data$Product.Type)
sum(is.na(sales_and_policy_data$Product.Line))
sum(is.na(sales_and_policy_data$Product.Type))
library(MASS)
data("Boston")
glimpse(BH)
BH <- data("Boston")
glimpse(BH)
View(BH)
data.boston <- data(Boston)
sample_index <- sample(nrow(Boston), nrow(Boston)*0.9)
sample_index <- sample(nrow(Boston), nrow(Boston)*0.9)
data.boston <- data(Boston)
sample_index <- sample(nrow(Boston), nrow(Boston)*0.9)
boston_train <- Boston[sample_index,]
boston_test <- Boston[-sample_index,]
install.packages('rpart')
install.packages('rpart.plot')
boston.rpart
boston_rpart <- rpart(formula = medv ~ ., data = boston_train)
install.packages('rpart')
install.packages('rpart.plot')
library(rpart)
library(rpart.plot)
boston_rpart <- rpart(formula = medv ~ ., data = boston_train)
boston.rpart
boston_rpart
prp(boston_rpart, digits = 3, extra = 1)
train_pred <- predict(object = boston_rpart)
head(train_pred)
?step
boston_lm <- (boston_train$medv ~ .)
boston_lm <- lm(boston_train$medv ~ . , boston_train)
boston.lm <- step(boston_lm, direction = "forward")
library("faraway")
data(nes96)
str(nes96)
?new96
?new96
?nes96
nrow(nes96)
hist(nes96$PID)
library(ggplot2)
cor(nes96$vote, nes96$PID)
?cor
oreder(nes96$PID)
order(nes96$PID)
order(levels(nes96$PID))
levels(nes96$PID)
?nes96
levels(nes96$PID)
party <- nes96$PID
levels(party) <- c("Democrat","Democrat","Independent","Independent",
"Independent", "Republican", "Republican")
inca<-
c(1.5,4,6,8,9.5,10.5,11.5,12.5,13.5,14.5,16,18.5,21,23.5,27.5,32.5,37.5,42.5,47.5,
55,67.5,82.5,97.5,115)
income<-inca[unclass(nes96$income)]
?unclass
rnes96<-data.frame(party, income, education=nes96$educ, age=nes96$age)
summary(rnes96)
ggplot(rnes96, aex(x=income)) + geom_histogram(color = "Darksseagreen")
ggplot(rnes96, aes(x=income)) + geom_histogram(color = "Darksseagreen")
ggplot(rnes96, aes(x=income)) + geom_histogram(color = "Darksseagreen", binwidth = 30)
ggplot(rnes96, aes(x=income)) + geom_histogram(color = "Darksseagreen",
binwidth = 30)
ggplot(rnes96, aes(x=income)) + geom_histogram(color = "Darkseagreen",
binwidth = 30)
ggplot(rnes96, aes(x=income)) + geom_histogram(fill = "Darkseagreen",
binwidth = 30)
ggplot(rnes96, aes(x=income)) + geom_histogram(fill = "Darkseagreen",
binwidth = 20)
library("dplyr")
egp<-group_by(rnes96, education, party) %>%
summarise(count=n()) %>% group_by(education) %>%
mutate(etotal=sum(count), proportion=count/etotal)
library("ggplot2")
ggplot(egp, aes(x=education, y=proportion,
group=party, linetype=party)) + geom_line()
igp<-mutate(rnes96, incomegp=cut_number(income,7)) %>%
group_by(incomegp, party) %>% summarise(count=n()) %>%
group_by(incomegp) %>% mutate(etotal=sum(count),
proportion=count/etotal)
ggplot(igp, aes(x=incomegp, y=proportion, group=party,
linetype=party)) + geom_line()
library(VGAM)
nmod <- vglm(party ~ age + education + income,
family = cumulative ( parallel = TURE), rnse96)
install.packages("VGAM")
library(VGAM)
library(VGAM)
nmod <- vglm(party ~ age + education + income,
family = cumulative ( parallel = TURE), rnse96)
nmod <- vglm(party ~ age + education + income,
family = cumulative ( parallel = TURE), rnes96)
family = cumulative ( parallel = TRUE, rnes96)
nmod <- vglm(party ~ age + education + income,
family = cumulative ( parallel = TRUE), rnes96)
edu.years<-c(9,10.5,12,13,14,16,18)
education<-edu.years[unclass(nes96$educ)]
rnes96$education<-education
nmod<-vglm(party ~ age + education + income,
famil
summary(nmod)
edu.years<-c(9,10.5,12,13,14,16,18)
education<-edu.years[unclass(nes96$educ)]
rnes96$education<-education
nmod<-vglm(party ~ age + education + income,
family=cumulative(parallel=TRUE), rnes96)
summary(nmod)
?roc.test
setwd("D:/R_Code/NLP/songlyrics")
require(devtools)
install_github("lchiffon/wordcloud2")
install_github("lchiffon/wordcloud2")
